#!/bin/bash
# test-api.sh - Script de test automatis√© pour l'API s√©curis√©e

API_URL="http://localhost:3000"
COOKIES_FILE="cookies.txt"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour r√©cup√©rer le token CSRF
get_csrf_token() {
    local token=$(curl -s -b $COOKIES_FILE -c $COOKIES_FILE $API_URL/api/auth/csrf-token | grep -o '"csrfToken":"[^"]*"' | cut -d'"' -f4)
    echo "$token"
}

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}üì° $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

echo -e "${BLUE}üöÄ Test automatis√© de l'API s√©curis√©e${NC}"
echo "=================================="

# Nettoyer les anciens cookies
if [ -f "$COOKIES_FILE" ]; then
    rm $COOKIES_FILE
    log_info "Nettoyage des anciens cookies"
fi

# 1. V√©rifier que l'API fonctionne
log_info "Test de connectivit√©..."
HEALTH_RESPONSE=$(curl -s $API_URL/api/health)
if [ $? -eq 0 ] && echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
    log_success "API accessible et fonctionnelle"
else
    log_error "API non accessible - V√©rifiez que le serveur fonctionne sur le port 3000"
    log_warning "Commande pour d√©marrer le serveur : npm run dev"
    exit 1
fi

# 2. R√©cup√©rer le token CSRF
log_info "R√©cup√©ration du token CSRF..."
CSRF_TOKEN=$(get_csrf_token)
if [ -n "$CSRF_TOKEN" ] && [ ${#CSRF_TOKEN} -gt 10 ]; then
    log_success "Token CSRF r√©cup√©r√© : ${CSRF_TOKEN:0:15}..."
else
    log_error "Impossible de r√©cup√©rer le token CSRF"
    log_warning "R√©ponse re√ßue : $(curl -s -c $COOKIES_FILE $API_URL/api/auth/csrf-token)"
    exit 1
fi

# 3. Test d'inscription
log_info "Test d'inscription..."
UNIQUE_USERNAME="testuser$(date +%s)"
REGISTER_RESPONSE=$(curl -s -b $COOKIES_FILE -X POST $API_URL/api/auth/register \
  -H "Content-Type: application/json" \
  -H "X-CSRF-Token: $CSRF_TOKEN" \
  -d "{\"username\":\"$UNIQUE_USERNAME\",\"password\":\"TestPassword123!\"}")

if echo "$REGISTER_RESPONSE" | grep -q "inscrit avec succ√®s"; then
    log_success "Inscription r√©ussie"
    USERNAME=$(echo "$REGISTER_RESPONSE" | grep -o '"username":"[^"]*"' | cut -d'"' -f4)
    echo "   üë§ Utilisateur cr√©√© : $USERNAME"
else
    log_error "√âchec de l'inscription"
    echo "   üìÑ R√©ponse : $REGISTER_RESPONSE"
    
    # Si l'utilisateur existe d√©j√†, continuer avec une connexion
    if echo "$REGISTER_RESPONSE" | grep -q "d√©j√† existant"; then
        log_warning "Utilisateur d√©j√† existant, test de connexion..."
        
        # R√©cup√©rer un nouveau token pour la connexion
        CSRF_TOKEN=$(get_csrf_token)
        LOGIN_RESPONSE=$(curl -s -b $COOKIES_FILE -X POST $API_URL/api/auth/login \
          -H "Content-Type: application/json" \
          -H "X-CSRF-Token: $CSRF_TOKEN" \
          -d "{\"username\":\"$UNIQUE_USERNAME\",\"password\":\"TestPassword123!\"}")
        
        if echo "$LOGIN_RESPONSE" | grep -q "Connect√© avec succ√®s"; then
            log_success "Connexion r√©ussie avec utilisateur existant"
        else
            log_error "√âchec de la connexion"
            exit 1
        fi
    else
        exit 1
    fi
fi

# 4. Test du profil (utilisateur connect√©)
log_info "Test d'acc√®s au profil utilisateur..."
PROFILE_RESPONSE=$(curl -s -b $COOKIES_FILE $API_URL/api/auth/profile)
if echo "$PROFILE_RESPONSE" | grep -q "Profil prot√©g√©"; then
    log_success "Acc√®s au profil autoris√©"
    USER_INFO=$(echo "$PROFILE_RESPONSE" | grep -o '"username":"[^"]*"' | cut -d'"' -f4)
    echo "   üë§ Profil de : $USER_INFO"
else
    log_error "Acc√®s au profil refus√©"
    echo "   üìÑ R√©ponse : $PROFILE_RESPONSE"
fi

# Test de validation (mot de passe faible)
log_info "Test de validation - mot de passe faible..."
CSRF_TOKEN=$(get_csrf_token)
WEAK_PASSWORD_RESPONSE=$(curl -s -b $COOKIES_FILE -X POST $API_URL/api/auth/register \
  -H "Content-Type: application/json" \
  -H "X-CSRF-Token: $CSRF_TOKEN" \
  -d "{\"username\":\"weakuser$(date +%s)\",\"password\":\"123\"}")

if echo "$WEAK_PASSWORD_RESPONSE" | grep -q "8 caract√®res"; then
    log_success "Validation des mots de passe fonctionne"
else
    log_error "La validation des mots de passe ne fonctionne pas correctement"
fi

# Test sans token CSRF (s√©curit√©)
log_info "Test de s√©curit√© - requ√™te sans token CSRF..."
NO_CSRF_RESPONSE=$(curl -s -b $COOKIES_FILE -X POST $API_URL/api/auth/register \
  -H "Content-Type: application/json" \
  -d "{\"username\":\"nocsrf$(date +%s)\",\"password\":\"TestPassword123!\"}")

if echo "$NO_CSRF_RESPONSE" | grep -q -i "forbidden\|csrf"; then
    log_success "Protection CSRF active"
else
    log_error "Protection CSRF non fonctionnelle"
    echo "   üìÑ R√©ponse : $NO_CSRF_RESPONSE"
fi

# 7. D√©connexion
log_info "Test de d√©connexion..."
CSRF_TOKEN=$(get_csrf_token)
LOGOUT_RESPONSE=$(curl -s -b $COOKIES_FILE -X POST $API_URL/api/auth/logout \
  -H "X-CSRF-Token: $CSRF_TOKEN")

if echo "$LOGOUT_RESPONSE" | grep -q "D√©connect√© avec succ√®s"; then
    log_success "D√©connexion r√©ussie"
else
    log_error "√âchec de la d√©connexion"
    echo "   üìÑ R√©ponse : $LOGOUT_RESPONSE"
fi

# 8. Test d'acc√®s non autoris√©
log_info "Test de s√©curit√© - acc√®s non autoris√© apr√®s d√©connexion..."
UNAUTH_RESPONSE=$(curl -s -b $COOKIES_FILE $API_URL/api/auth/profile)
if echo "$UNAUTH_RESPONSE" | grep -q "Non autoris√©"; then
    log_success "S√©curit√© OK - Acc√®s refus√© aux utilisateurs non connect√©s"
else
    log_error "Probl√®me de s√©curit√© d√©tect√©"
    echo "   üìÑ R√©ponse : $UNAUTH_RESPONSE"
fi

echo ""
echo -e "${GREEN}üéâ Tests termin√©s !${NC}"
echo -e "${BLUE}üìã R√©sum√© des tests effectu√©s :${NC}"
echo "   ‚Ä¢ Connectivit√© API"
echo "   ‚Ä¢ R√©cup√©ration token CSRF" 
echo "   ‚Ä¢ Inscription utilisateur"
echo "   ‚Ä¢ Acc√®s profil prot√©g√©"
echo "   ‚Ä¢ Validation mot de passe"
echo "   ‚Ä¢ Protection CSRF"
echo "   ‚Ä¢ D√©connexion"
echo "   ‚Ä¢ S√©curit√© acc√®s non autoris√©"
echo ""
echo -e "${YELLOW}üí° Nettoyage : ${NC}rm $COOKIES_FILE"

# Nettoyer automatiquement
rm -f $COOKIES_FILE